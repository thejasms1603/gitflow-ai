// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["postgresqlExtensions"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
    extensions = [vector]
}


model Post {
  id        String   @id @default(uuid())
  name      String
  createdAt DateTime @default(now()) // Auto-generate timestamps
}
model User {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    imageUrl String?
    firstName String
    lastName String
    email String @unique
    tokens Int @default(150)
    userToProjects UserToProject[]
    questionsAsked Question[]
    stripeTransactions StripeTransaction[]
}

model Project {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    name String
    githubUrl String
    deletedAt DateTime?
    userToProjects UserToProject[]
    commits Commitlog[]
    codeembedding SourceCodeEmbedding[]
    savedQuestions Question[]
    meetings Meeting[]
}


model UserToProject {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt 
    userId String
    projectId String
    user User @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])
    @@unique([userId, projectId])
}


model SourceCodeEmbedding {
    id String @id @default(cuid())
    summaryEmbedding Unsupported("vector(768)")?
    sourceCode String
    fileName String
    summary String
    projectId String
    project Project @relation(fields: [projectId], references: [id])
}

model Commitlog {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    projectId String
    project Project @relation(fields: [projectId], references: [id])
    commitMessage String
    commitHash String
    commitAuthorName String
    commitAuthorAvatar String
    commitDate DateTime
    summary String
}

model Question {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAT DateTime @updatedAt
    question String
    answer String
    filesReferences Json?
    projectId String
    userId String
    user User @relation(fields: [userId], references: [id])
    project Project @relation(fields: [projectId], references: [id])
}

model Meeting {
    id String @id @default(cuid())
    name String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    meetingUrl String
    projectId String
    project Project @relation(fields: [projectId], references: [id])
    status MeetingStatus @default(PROCESSING)
    issues Issue[]
}


model Issue {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    start String
    end String
    gist String
    headline String
    summary String
    meetingId String
    meeting Meeting @relation(fields: [meetingId], references: [id])
}
enum MeetingStatus {
    PROCESSING
    COMPLETED
    FAILED
}

model StripeTransaction {
    id String @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
    userId String
    user User @relation(fields: [userId], references: [id])
    tokens Int
}